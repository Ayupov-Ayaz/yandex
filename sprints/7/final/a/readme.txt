// Алгоритм, реализованный в данном коде, вычисляет расстояние Левенштейна между двумя строками. Расстояние Левенштейна - это минимальное количество атомарных операций вставки, удаления и замены символов в строке s, чтобы получить строку t.
//
// Алгоритм использует динамическое программирование. Он создает матрицу размером (len(s) + 1) x (len(t) + 1), где каждый элемент матрицы (i, j) содержит минимальное количество атомарных операций для превращения подстроки s[:i] в подстроку t[:j]. Алгоритм заполняет матрицу с помощью следующих шагов:
//
// Инициализация: для каждого i от 1 до len(s), матрица[i, 0] устанавливается равной i, и для каждого j от 1 до len(t), матрица[0, j] устанавливается равной j.
//
// Для каждого i от 1 до len(t) и каждого j от 1 до len(s), вычисляем значение матрицы (i, j) на основе значений, уже имеющихся в матрице, используя следующее рекуррентное соотношение:
//
// Если s[j-1] == t[i-1], то matrix[i][j] = matrix[i-1][j-1]
// Иначе, matrix[i][j] = min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1]) + 1, где min - функция выбора минимального значения из трех.
//
// Искомое расстояние Левенштейна будет находиться в ячейке (len(t), len(s)).
//
// Сложность данного алгоритма - O(len(s) * len(t)), так как заполняется матрица размера (len(s) + 1) x (len(t) + 1).
//
// Память, используемая данным алгоритмом, равна O(len(s) + len(t)), так как используется только один одномерный массив длиной (len(s) + 1), который перезаписывается на каждой итерации внешнего цикла.
