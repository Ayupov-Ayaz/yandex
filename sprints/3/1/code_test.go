package main

import (
	"github.com/stretchr/testify/require"
	"strconv"
	"strings"
	"testing"
)

func makeInput(count int, startLeft, startRight, mid int) []int {
	resp := make([]int, count)
	k := startLeft

	for i := 0; i < count; i++ {
		if k == mid {
			k = startRight
		}
		resp[i] = k
		k++
	}

	return resp
}

func BenchmarkBrokenSearch(b *testing.B) {
	var got int
	b.ResetTimer()
	b.ReportAllocs()
	for i := 0; i < b.N; i++ {
		got = brokenSearch(testCase.arr, testCase.need)
		if got != testCase.exp {
			b.Fatal("got != exp")
		}
	}
}

var parseStr = func(str string) []int {
	strArr := strings.Split(str, " ")
	resp := make([]int, len(strArr))
	for i, v := range strArr {
		resp[i], _ = strconv.Atoi(v)
	}

	return resp
}

var testCase = struct {
	need int
	exp  int
	arr  []int
}{
	need: 401,
	exp:  555,
	arr:  parseStr("471 472 473 474 475 481 483 485 487 488 489 491 492 493 494 495 497 501 502 503 504 505 506 507 510 512 514 516 517 518 519 520 521 522 524 527 530 531 532 534 535 536 538 539 542 545 546 547 549 550 551 552 553 556 558 559 560 561 563 564 565 566 567 568 570 571 572 573 574 575 576 577 578 580 582 583 585 587 590 591 592 593 594 595 596 598 600 601 604 606 609 610 611 612 613 619 620 622 623 626 628 629 630 631 633 636 637 641 642 645 646 647 649 650 651 652 653 655 657 659 662 664 665 667 668 669 672 673 678 680 681 682 683 684 685 689 690 691 695 698 699 700 701 702 703 704 705 706 707 708 710 711 713 715 719 722 723 725 727 729 730 733 736 739 742 743 745 746 747 748 750 751 753 756 760 761 762 763 764 765 767 770 772 773 774 778 781 782 783 784 786 787 789 790 793 794 795 796 797 800 801 802 804 805 806 807 809 811 814 815 816 817 819 820 821 822 823 824 828 829 832 833 834 836 837 838 839 840 843 844 845 846 848 851 852 857 859 860 861 863 864 869 870 871 873 877 878 879 881 882 883 892 893 894 895 896 896 897 898 899 900 902 905 906 908 909 910 911 916 917 918 922 923 926 927 928 929 930 931 932 933 935 936 937 938 939 942 943 944 945 946 947 948 949 952 953 955 957 959 960 961 962 963 964 966 967 970 972 975 976 978 981 983 984 986 987 989 990 991 993 997 998 0 1 4 5 6 7 8 9 12 14 18 19 21 22 23 26 27 28 32 33 35 36 37 41 43 45 46 47 51 52 53 58 61 62 66 70 72 75 77 78 79 80 82 83 84 85 86 92 94 95 96 97 98 100 101 103 104 105 106 107 108 109 111 113 115 118 119 121 122 123 127 131 134 135 138 139 140 144 145 147 149 150 152 153 155 156 160 161 162 164 165 167 168 169 170 172 173 174 175 179 180 181 182 184 187 188 190 191 192 193 196 199 200 202 203 204 205 206 207 208 211 212 213 216 217 218 220 221 222 223 224 226 227 228 229 230 231 232 233 234 236 237 240 241 243 244 247 249 254 255 260 261 263 264 265 267 269 271 274 278 280 282 284 286 288 289 292 295 296 301 302 303 306 308 309 310 311 312 313 318 319 321 323 328 329 330 331 332 334 337 338 339 341 342 346 347 349 351 352 354 355 357 358 359 361 362 364 366 367 368 370 371 372 373 374 375 378 379 380 382 384 385 387 388 389 390 392 393 396 397 398 399 400 401 402 405 408 410 411 413 414 416 417 420 421 423 424 426 427 429 430 432 436 439 440 442 443 444 445 449 450 451 453 455 457 458 460 462 463 466 470"),
}

func TestBrokenSearch(t *testing.T) {

	tests := []struct {
		name string
		arr  []int
		exp  int
		need int
	}{
		{
			name: "0",
			arr:  []int{1, 2, 3},
			need: 4,
			exp:  -1,
		},
		{
			name: "1",
			arr:  []int{19, 21, 100, 101, 1, 4, 5, 7, 12},
			need: 5,
			exp:  6,
		},
		{
			name: "3",
			arr:  []int{5, 1},
			need: 1,
			exp:  1,
		},
		{
			name: "4",
			arr:  []int{8, 10, 0, 2, 4},
			need: 4,
			exp:  4,
		},
		{
			name: "6",
			arr:  []int{9, 1, 3, 8},
			need: 8,
			exp:  3,
		},
		{
			name: "7",
			arr:  []int{12, 41, 122, 411, 412, 1222, 3000, 12222, 122222},
			need: 3000,
			exp:  6,
		},
		{
			name: "8",
			arr:  parseStr("19 21 100 101 1 4 5 7 12"),
			need: 5,
			exp:  6,
		},
		{
			name: "9",
			arr:  makeInput(789, 890, 123, 763),
			need: 1000,
			exp:  110,
		},
		{
			name: "10",
			need: testCase.need,
			exp:  555,
			arr:  testCase.arr,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := brokenSearch(tt.arr, tt.need)
			require.Equal(t, tt.exp, got)
		})
	}
}
