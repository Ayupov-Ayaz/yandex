package main

// Расписал алгоритм поиска в сломанном массива, который является отсортированным но сдвинутым
// Изначально мы передаем в функцию аргументы
// arr - исходный массив элементов
// left - левый край поиска, в самом начале он будет равен - "0"
// right - правый край поиска, в самом начале он будет равен длине массива -1
// need - число, индекс которого необходимо найти
//
// --- Принцип работы ---
// мы запускаем цикл до тех пор пока индекс левой стороны не станет больше или равен индексу правой стороны массива
// на каждой итерации мы находим середины массива и проверяем не равен ли он нашему значению переменной "need"
//
//   - если да, тогда просто выходим из функции
//
//   - если нет, тогда находим ту сторону которая отсортирована и смотрим с какой стороны у нас будет находиться наше число
//
//   - - если значение текущей середины меньше, чем наш "need", тогда переставляем левый указатель
//
//   - - иначе переставляем правый указатель
//
//     используя данный алгоритм, мы каждый раз делим наш массив на 2
//     что является реализацией бинарного поиска
//
// -- Временная сложность --
// O(Log(n) - бинарный поиск
// O(1) -  сложность по памяти, мы ничего дополнительно не создаем, используем то что имеется
//
// https://contest.yandex.ru/contest/23815/run-report/80247542/
func search(arr []int, left, right, need int) int {
	var mid int

	for left <= right {
		mid = (left + right) / 2
		midValue := arr[mid]

		if midValue == need {
			return mid
		}

		if arr[left] <= midValue {
			// левая сторона отсортирована
			if arr[left] <= need && need <= midValue {
				// нужный нам элемент находитмся слева от середины
				right = mid - 1
			} else {
				// нужный нам элемент находится справа от середины
				left = mid + 1
			}
		} else {
			// правая сторона отсортирована
			if midValue <= need && need <= arr[right] {
				// нужный нам элемент находится справой стороны
				left = mid + 1
			} else {
				// нужный нам элемент находится слевой стороны
				right = mid - 1
			}
		}
	}

	return -1
}

func brokenSearch(arr []int, need int) int {
	return search(arr, 0, len(arr)-1, need)
}
